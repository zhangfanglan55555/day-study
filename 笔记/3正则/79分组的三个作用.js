/**
 * 分组（小括号）的作用：
 *  1. 改变默认的优先级
 *  2. 分组捕获
 *  3. 分组引用
 */
let reg = /^18|19$/;//以1或者18开头以9或者19结束
reg.test('18');//
reg.test('19');
reg.test('1819')
reg.test('189');
reg.test('181')
reg.test('819');
reg.test('119');

/**都是true */

let reg = /^(18|19)$/;//18 或者19
reg.test('18');
reg.test('19')
reg.test('118');
/**
 * true
 * true
 * false
 */

 let reg = /^([a-z])([a-z])\2\1$/
 /**
  * [分组引用]
  */
 // 正则中出现的\1代表和第一个分组出现一模一样的内容 
 reg.test('oppo');//true
 reg.test('poop');

 /**
  * [分组捕获]
  */
 //编写一个正则匹配身份证号码（18位）
 let reg = /^\d{17}(\d|X)$/;//简单只能匹配是否符合格式，不能提取出身份证中的一些信息

 130828199012040617
 //130828 地域
 // 19901204 出生年月
 // 0617 倒数第二位：奇数=男 偶数=女

 let reg = /^(\d{6})(\d{4})(\d{2})(\d{2})\d{2}(\d)(?:\d|X)$/;
 reg.exec('130828199012040617')
 /**
  *  (?:) 当前分组只匹配不捕获
  * exec实现的是正则捕获，获取的结果是一个数组,捕获的时候不仅把大正则匹配的信息捕获到，而且
  * 每一个小分组中的内容也捕获到了（分组捕获）
  *  ["130828199012040617", "130828", "1990", "12", "04",
  *      "1", index: 0, input: "130828199012040617", groups: undefined]
  */
 /**
  * 正则捕获使用的是正则中的EXEC方法：
  * 1.如果可以匹配获取的结果是一个数组，如果不能匹配获取的结果是null
  * 2.如果我们只在匹配的时候，想要获取大正则中部分信息，我们可以把这部分使用小括号抱起来，形成一个分组，
  * 这样在捕获的时候，不仅可以把大正则匹配的信息捕获到而且还单独的把小分组匹配的部分信息也捕获到了（分组捕获）
  * 3.有时候写小分组不是为了捕获信息，只是为了改变优先级或者分组引用，此时我们可以在分组的前面加上”？：“代表只
  * 去匹配，但是不把这个分组内容捕获
  */