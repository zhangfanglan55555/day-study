/**
 * 事件委托（事件代理）
 * 利用事件冒泡传播机制，如果一个容器的后代元素中很多元素的点击行为（其他行为也是）都要做一些处理
 * ，此时我们不需要再像以前一样一个个获取一个个的绑定了， 我们只要给容器的click绑定方法即可，这样
 * 不管点击的是哪一个后代元素，都会根据冒泡传播的传递机制，把容器的click行为触发，把对应的方法执行，根据事件源，我们可以
 * 知道点击的是谁，从而做不同的事情即可、
 * 
 *    一个容器中，很多后代元素的点击行为都要处理一些事情，之前拿的思路是把需要操作的元素一一获取，然后再一一事件绑定，
 * 在不同的方法中完成不同的需求；现在不用了，基于事件的冒泡传播，我们可以只给容器的click绑定一个方法，这样不管以后点击的是容器中的
 * 哪一个后代元素，都会通过事件的冒泡传播机制，把容器的click行为触发，把绑定的方法执行，我们再方法执行的时候，
 * 根据事件对象中的事件源(ev.target)来做不同的业务处理即可，这种机制即是事件委托机制。
 * 1.容器中很多后代元素的某个行为要进行操作，委托给容器处理是不错的选择
 * 2.元素是动态绑定的
 * 3.需求是除了xxx，剩下的操作都是干同样的事情（此时把点击行为的操作委托给body，
 * 事件是xxx做什么，不是统一做什么）
 */